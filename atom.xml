<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bing's Blog]]></title>
  <link href="http://binglim.github.com/atom.xml" rel="self"/>
  <link href="http://binglim.github.com/"/>
  <updated>2013-04-04T16:45:51+08:00</updated>
  <id>http://binglim.github.com/</id>
  <author>
    <name><![CDATA[Bing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes of Web Intelligence and Big Data - 1 Look]]></title>
    <link href="http://binglim.github.com/blog/2013/04/04/notes-of-web-intelligence-and-big-data-1-look/"/>
    <updated>2013-04-04T13:40:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/04/04/notes-of-web-intelligence-and-big-data-1-look</id>
    <content type="html"><![CDATA[<h2 id="text-indexing-">Text Indexing 基本文本索引</h2>
<p>当你在网络中搜索文档时，会出现最匹配你查询的关键字的结果。实现这个功能的技术叫做text indexing。</p>

<p>如果使用平衡二叉树，查找一个词需要<em>O(log m)</em>（hashing会更高效一点:<em>O(1+m/K)</em>），如果查询q个关键字，则还要耗费时间<em>O(rq)</em>在整合查询各个关键字的结果上，其中，r是所有中间结果。如果r非常大，就会很耗时。
<!--more--></p>

<h3 id="section">如何创建一个文本索引</h3>
<p>遍历各个文档中的单词并在索引中搜索，如果索引中没有这个单词，就添加一个索引并将索引附在后面，如果已经有了，则直接在索引后面附加这个单词。python伪代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">index</span><span class="p">:</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">D</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">D</span><span class="p">:</span>
</span><span class="line">      <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="n">lookup</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">          <span class="n">j</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span><span class="line">          <span class="n">index</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">d</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">          <span class="n">index</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">创建索引的复杂度</h3>
<p>n个文档，m个单词，每个文档w个单词。每个单词都要被读取，时间复杂度至少是<em>O(nw)</em>。此外，我们需要在排序结构中查找m个单词（如果它之前已经被添加在索引中），则时间话费是<em>O(log m)</em>或<em>O(1)</em>（如果使用一个好的哈希表）。我们还必须为每个单词插入包含该单词文档的url，假设每个插入操作耗费的时间都是常数。因此这个过程的复杂性<em>O(nw log m)</em>(使用平衡二叉树来存储单词)或<em>O(nw)</em>（使用哈希表来存储单词）。</p>

<h2 id="page-rank">Page Rank</h2>
<p>一个随机的上网冲浪者访问一个特定页面的概率就是page rank。Page rank是一个全局属性，通过迭代、连续、并行的计算得到。它与相邻矩阵（adjacency matrix）的最大特征向量相关。</p>

<h3 id="section-2">搜索与记忆</h3>
<p>人类记忆与Google的海量索引不同，人们不擅长记忆一些事实，如拿破仑什么时候战败滑铁卢；经常需要环境来增强回忆，如在商场可能就认不出同事；记忆是通过时间链接的；记忆是“模糊”的。</p>

<h3 id="google-and-the-mind">Google and the mind</h3>
<p>我们依赖page-rank越多，page-rank就会变得越糟糕。Page-rank依赖于链接，包含链接是为了更方便地使用google。新的页面只有很少的链接，因此不利于其page-rank的计算。我们很难记住一些事情，所以我们更多地使用Google。Google用得越多，我们记住的越少。然而，我们搜索并获取结果，点击进入网页，这种相关的反馈能够改进搜索（增强page-rank）。</p>

<h3 id="section-3">”私人“搜索</h3>
<p>desktops，email等私人搜索的索引工作遇到的问题：
- 没有链接，不能直接使用page-rank
- 需要使用其它关联性，如命名实体（人，地点）和相关反馈（通过跟踪用户行为）
- 重复检测和处理（如相同的文档拥有多个版本和格式）</p>

<p>除了搜索，还有一些挑战：
- 包括多个角色的语言分析
- 分类
- 安全性-基于角色的访问控制
- 结构化数据</p>

<h3 id="section-4">搜索结构化数据</h3>
<p>在一个错综复杂的关系型数据库中搜索一些特定的内容可能需要查询大量的表，执行大量的SQL语句。要是有许多格式不同的数据库就更糟糕了，最糟糕的是，一些数据在文档中，一些在数据库里。因此，这仍然是一个研究问题。</p>

<h2 id="locality-sensitive-hashinglsd">Locality Sensitive Hashing(LSD)</h2>

<p>反向索引并不是搜索对象最好的方法，另一个强大的方法叫做Locality Sensitive Hashing，它可以比较n对对象在<em>O(n)</em>时间内。</p>

<h3 id="section-5">基本思路</h3>
<p>h(x)是x的哈希函数，如果x等于或接近y，h(x)=h(y)就有很大可能，反之亦然；如果x不等于y或与y差距很大，则h(x)很可以不等于h(y)。</p>

<h3 id="lsh">LSH用于指纹匹配</h3>
<p>如果指纹细节特征点(minutae)匹配，则指纹匹配。Minutae是指指纹中一些特殊情况发生的位置，如两个纹路交汇或者碰到纹路断电的情况。如果用网格来覆盖指纹，那么指纹可以表示成包含有细节特征点的网格块集合。</p>

<p>用f(x)=1表示指纹x在某个特定的k网格位置有细节特征点，用p来表示指纹在一个特定位置有细节特征点的概率，则 $p[f(x)=1]=p^k$。</p>

<p>现在假设有同一个人的另一指纹y，用q来表示y和x有一样的细节特征点的概率，则 $P[f(x)=f(y)=1]=(pq)^k$。 如果我们使用b哥这样的函数f，则至少一个这样的f匹配的概率为 $1-(1-(pq)^k)^b$。但是，如果x不等于y，那么他们至少有一个匹配的概率则为 $1-(1-p^2k)^b$。</p>

<h3 id="lsh-1">一些LSH的大数据应用</h3>
<ul>
  <li>不比较所有的组合对来聚集类似的tweets</li>
  <li>近似文档的检测</li>
  <li>在时间序列中寻找模式（如传感器数据）</li>
  <li>通过多个输入来识别用户</li>
  <li>等等</li>
</ul>

<h3 id="lsh-2">LSH与降维</h3>
<p>LSH能进行高维对象的降维，随机哈希函数是局部敏感的，相似的对象会映射到相似的哈希值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Web Intelligence and Big Data - 0 Introduction]]></title>
    <link href="http://binglim.github.com/blog/2013/04/04/notes-of-web-intelligence-and-big-data/"/>
    <updated>2013-04-04T12:10:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/04/04/notes-of-web-intelligence-and-big-data</id>
    <content type="html"><![CDATA[<h2 id="web-intelligence-and-big-data-on-coursera">Web Intelligence and Big Data on Coursera</h2>
<p>Coursera上的 <em>Web Intelligence and Big Data</em> 开始了，据传说这是一个广度胜于深度的课程，覆盖到了许多话题，对于并非专攻这个领域的人来说，应该是一个很好的知识普及材料。课程是来自印度理工学院（IIT）的，老师也是明显的印度腔，但还不至于听不懂。说话的速度很慢，1.5倍速比较合适。这门课应该起不到练听力的效果了T_T。</p>

<p>这门课程的推荐教材有：</p>

<p><em>Mining Massive Datasets</em> by J.D. Ullman and A. Rajaraman (Cambridge University Press, UK 2012)</p>

<p><em>Introduction to Information Retrieval</em> by Christopher Manning, Prabhakar Raghavan and Hinrich Schutze (Cambridge University Press, UK 2008)</p>

<p><em>Enterprise Cloud Computing</em> by Gautam Shroff (Cambridge University Press, UK 2010)
<!--more-->
前两本书都可以在斯坦福的网站上下到，第三个是教授本人的作品。第一本书比较新，前段时间在各大购书网站上还是很火的，某人那里还有一本，顺手拿来看看。书的封面我很喜欢，纸张质量也很不错，让人很有看的欲望。前两本书都有人翻译过，而且是同一个人翻译的！</p>

<p>更多的，只能等到学习后再说了……</p>

<h2 id="introduction">Introduction</h2>

<h3 id="turing-test">图灵测试（Turing Test）</h3>
<p>图灵测试：一个人通过问两个对象（人和机器）问题来判断哪个是人，哪个是机器，若问了若干问题后仍无法判断，则机器通过图灵测试。</p>

<p>反向图灵测试（Reverse Turing Test）则是由机器提问来判断人和机器，如验证码（CAPTCHA）。</p>

<h3 id="section">大数据技术</h3>
<p>Google, Facebook等并不适用传统的数据库来处理大数据，而事使用大规模并行计算和Map-Reduce范式。</p>

<p>数据的智能：反应智能（Reactive Intelligence）和预测智能（Predictive Intelligence）。</p>

<p>使用人工智能和大数据来预测未来：
Search(Look) -&gt; Machine Learning(Listen) -&gt; Information Extraction(Learn) -&gt; Reasoning(Connect) -&gt; Data Mining(Predict) -&gt; Optimization(Correct).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful tools in archlinux]]></title>
    <link href="http://binglim.github.com/blog/2013/01/30/useful-tools-in-archlinux/"/>
    <updated>2013-01-30T18:47:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/01/30/useful-tools-in-archlinux</id>
    <content type="html"><![CDATA[<p>做个记录，以备不时之需……</p>

<h4 id="cdrkit-">cdrkit 刻录工具</h4>
<p>设置权限：</p>

<pre><code>gpasswd -a &lt;username&gt; optical
</code></pre>

<p>常用命令：</p>

<pre><code>wodim -v dev=/dev/cdrw isoimage.iso #刻录ISO
dd if=/dev/cdrom of=/home/user/isoimage.iso #从光盘生成ISO
mkisofs -o isoimage.iso ~/folder #从硬盘上的文件生成一个iso镜像
</code></pre>

<h4 id="udevil-">udevil 挂载工具，无需密码</h4>
<p>常用命令：<!--more--></p>

<pre><code>udevil mount /dev/sdd1 #挂载
udevil umount /dev/sdd1 #卸载
devmon #自动挂载
devmon -a #全部挂载
devmon -u #全部卸载
</code></pre>

<h4 id="chromium-">chromium 不解释</h4>
<p>#### alsa-utils 声音控制
含有alsamixier用户空间工具，在终端中配置声卡。安装alsa-oss如果需要OSS应用程序与软件混音协同工作。
#### synaptics 触摸板
#### cpupower CPU频率控制</p>

<pre><code>cpupower frequency-info #获取CPU信息
</code></pre>

<h4 id="richad-huanghttphuanghuachaocn">抄袭<a href="http://huanghuachao.cn">Richad Huang</a></h4>
<ul>
  <li>ranger 文件管理</li>
  <li>mpd ncmpcpp 音乐播放</li>
  <li>htop 进程监管</li>
  <li>wicd 网络控制</li>
  <li>xmond + slim 窗口管理+登录管理</li>
</ul>

<h4 id="section">各种作图</h4>
<ul>
  <li>gimp linux中的photoshop</li>
  <li>dia 作各种图，但觉得不好看</li>
  <li>xmind 思维导图</li>
  <li>astah-community UML</li>
</ul>

<p><strong>几个不错的在线作图网站</strong></p>

<ul>
  <li><a href="https://cacoo.com/diagrams/">cacoo</a></li>
  <li><a href="https://gomockingbird.com/mockingbird/">mockingbird</a></li>
  <li><a href="http://lumzy.com/app/">lumzy</a></li>
  <li><a href="http://www.gliffy.com/gliffy/">gliffy</a></li>
  <li><a href="http://www.toondoo.com/createToon.do">toondoo</a> 这个是弄漫画的</li>
</ul>

<h4 id="dmenu-">dmenu 快速启动</h4>

<pre><code>dmenu_run #运行
</code></pre>

<h4 id="libreoffice-">libreoffice 不解释</h4>
<p>#### fcitx 不解释
#### emacs + auctex 不解释
#### 还有。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让32位archlinux识别4G内存]]></title>
    <link href="http://binglim.github.com/blog/2013/01/30/let-archlinux-see-4gb-of-memory/"/>
    <updated>2013-01-30T16:41:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/01/30/let-archlinux-see-4gb-of-memory</id>
    <content type="html"><![CDATA[<p>当初小手一抖，装的是32位的archlinux，但只能识别出笔记本4G内存上的3G，又不想重装系统，只能自己编译内核的pae版本。
    yaourt linux-pae
编译的时候出现No space left on device的错误，这时把/etc/yaourtrc文件中的TMPDIR改掉就可以了，因为yaourt默认实用/tmp文件夹进行编译，而linux下/tmp文件夹的大小又默认为内存的一半，因此把它改成TMPDIR=”/var/tmp”就可以了。</p>

<p>编译完成后，编辑一下/boot/grub/grub.cfg文件，找到引导项中的linux和initrd，将/vmlinuz-linux和/initramfs-linux分别改为/vmlinuz-linux-pae和/initramfs-linux-pae-fallback.img。</p>

<p>重启即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每一条龙，都有自己的湾]]></title>
    <link href="http://binglim.github.com/blog/2013/01/26/trace-of-wenzhou-longwan/"/>
    <updated>2013-01-26T20:00:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/01/26/trace-of-wenzhou-longwan</id>
    <content type="html"><![CDATA[<p>“每一条龙，都有自己的湾。”这是万科一楼盘的广告语。龙湾本是一小村庄，不知为何变成了区名，吞噬了永强。然而，在这片土地上成长起来的人们，显然对“永强”这两个字更有归属感。十几年前，部分身份证以330304打头的人突然从瓯海人变成了龙湾人，从此瓯海无海，延续了几十年的行政地理割裂开来。
<!-- more -->
整个永强像是一个工业区，可以抱怨的似乎太多：无数的工厂，逼仄的街道，高企的物价，混乱的交通。尽管远离市中心，却失去了成为世外桃源的一切条件。然而它终究在变好，城市化是当今社会不可逆转的过程。无论将来身在何处，总还是希望家乡能够有所发展。城市向东，奥体、轨道交通等工程已经描绘出了一幅蓝图，有人说，几年后，这里会变成城市。</p>

<p>每次回家，都会想出去逛一圈，它的变化十分迅速，倘若我离家几年，回来应该会有一种陌生的感觉吧。一直觉得，永强的商业是与其经济极不对称的，即便宝马奔驰满街，本地也没有一个像样的商场，以至于万达刚开业人气如此火爆。好歹终于有个能逛的地方了。</p>

<iframe src="https://skydrive.live.com/embed?cid=690DC627810F3B99&amp;resid=690DC627810F3B99%21153&amp;authkey=AJjRw3-KYELKGic" height="240" frameborder="0" scrolling="no"></iframe>

<p>万达的速度确实给人一种大跃进的快感，从拿地到开业只花了20个月，让人很期待二期。</p>

<iframe src="https://skydrive.live.com/embed?cid=690DC627810F3B99&amp;resid=690DC627810F3B99%21117&amp;authkey=AJibdph--vY0UT0" height="240" frameborder="0" scrolling="no"></iframe>

<p>现在的永强，是一个大工地，到处都是脚手架和吊车，每次回来，都能看见很多新楼。
&lt;iframe src=&#8221;https://skydrive.live.com/embed?cid=690DC627810F3B99&amp;resid=690DC627810F3B99%21123&amp;authkey=ACNYUMFHkg3v9_E&#8221; height=&#8221;240&#8221; frameborder=&#8221;0&#8221; scrolling=&#8221;no&#8221;&gt;&lt;/iframe&gt;</p>

<p>然而有时候又不得不吐槽一下开发商的审美。
&lt;iframe src=&#8221;https://skydrive.live.com/embed?cid=690DC627810F3B99&amp;resid=690DC627810F3B99%21138&amp;authkey=AJ6tgIJWftwjQjQ&#8221; height=&#8221;240&#8221; frameborder=&#8221;0&#8221; scrolling=&#8221;no&#8221;&gt;&lt;/iframe&gt;
&lt;iframe src=&#8221;https://skydrive.live.com/embed?cid=690DC627810F3B99&amp;resid=690DC627810F3B99%21125&amp;authkey=AHcIMpOLTpIYevw&#8221; height=&#8221;240&#8221; frameborder=&#8221;0&#8221; scrolling=&#8221;no&#8221;&gt;&lt;/iframe&gt;</p>

<p>明年近日，会看到什么样的永强？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Archlinux]]></title>
    <link href="http://binglim.github.com/blog/2013/01/23/notes-of-installing-archlinux/"/>
    <updated>2013-01-23T20:00:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/01/23/notes-of-installing-archlinux</id>
    <content type="html"><![CDATA[<p>回家之后日子过得舒坦了，也就开始了折腾。加上移动硬盘到手了，索性就把电脑里的东西清了个干净，装了一下archlinux，紧接着又跟着超哥的足迹，把他推荐的软件都装了个遍，虽然也不是很多。期间也试了不少东西，颇有收获。随便记录一下期间的一些内容，也许以后还会用到。
<em>**</em></p>

<h2 id="section">关于窗口管理器</h2>

<p>刚开始装了个openbox的，也搞了各种配置，后来某位少年说跟windows没什么差的，遂装13心理发作，索性玩一下tiling window的，于是试了一下xmonad，stumpwm，awesome。刚开始是先装了xmonad的，<!-- more -->但看到xmonad的配置文件那一坨坨的语句感到很有压力，恰逢fcitx在终端运行的部分程序中无法使用中，按照wiki以及各种论坛中的配置与方法试了好久也不行，但在openbox下却没问题，于是就想换个WM看看行不行。于是下了个stumpwm。这东西一上来就给人一种很不顺手的感觉，没玩几下迅速删除。紧接着下了个awesome，其实awesome给人的感觉挺好的，但总感觉窗口的排布不如xmonad讨人喜欢，于是又换回xmonad，至于输入法，只要不是通过终端启动的程序都是能正常工作的，所以就给那些之前无法正常工具的程序都绑定了快捷键。xmonad的配置也只是按照官方给的example简单的改了一下，还未掌握haskell的要领。</p>

<h2 id="virtualbox">安装虚拟机virtualbox</h2>

<p>其实还有个.net相关的作业没有做，但windows已经删掉了，所以怒装了一个virtualbox，过程很简单，但wiki好像写了不少，反正也用不到，没仔细看。</p>

<pre><code>pacman -S vitualbox
gpasswd -a username vboxusers
modprobe vboxdrv
</code></pre>

<h2 id="section-1">声音独占</h2>

<p>其实从ubuntu换到archlinux还是遇到了不少问题的，本身就是一只小菜鸟，对linux毕竟还不是很熟悉，比如默认的系统不会自动加载oss模块，所以不同两个程序同时播放声音，加载一下snd_pcm_oss,snd_seq_oss,snd_pcm_oss模块就可以解决这个问题了。把要自动加载的模块写到一个.conf文件放到/etc/modules-load.d文件夹下就可以不用手动加载了。</p>

<h2 id="matlab">MATLAB等程序灰色的一片</h2>

<p>如果你基本复制了官方的配置文件，那么把defaultConfig里的startupHook改成  startupHook = setWMName “LG3D”  就可以了。</p>

<h2 id="section-2">还有很多，下次有空再写吧………</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折腾，是我们对应然之事的承诺]]></title>
    <link href="http://binglim.github.com/blog/2013/01/12/restart-again/"/>
    <updated>2013-01-12T19:59:00+08:00</updated>
    <id>http://binglim.github.com/blog/2013/01/12/restart-again</id>
    <content type="html"><![CDATA[<p>这是一个看似很文艺的标题，来源于前段时间一个很火的和谐事件。
博客再一次大换血了，虽然离上一次并不是很久。
由于各种原因，换回octopress了。</p>

<h3 id="section">这次更换带来的好处也很明显了：</h3>
<ul>
  <li>省了一笔费用，且基本没有数据丢失的顾虑
<!-- more --></li>
  <li>写博客变得更方便，markdown神马的，还不用登录后台</li>
  <li>静态页面快快的访问速度，文章的生成速度也比较快</li>
  <li>还有很多的…</li>
</ul>

<h3 id="section-1">缺点呢：</h3>
<ul>
  <li>用手机发博客不可能了，换电脑也疼</li>
  <li>插件主题什么的也少，好在需要的不多，该有的都有</li>
</ul>

<p>突然想起来Maslow的那几个需求，其实程序员还有一种装13的需求，又好用又能装13的东西，谁不喜欢呢。
<em>**</em>
## Next
接下来还会不会再折腾呢，这是说不准的，生命在于无止境地折腾与运动…</p>
]]></content>
  </entry>
  
</feed>
